package com.gr1.jwt;

import io.jsonwebtoken.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
@Slf4j
public class JwtUtil {
    @Value("${aresky.jwt.secret}")
    private String JWT_SECRET_KEY;
    @Value("${aresky.jwt.expiration}")
    private int JWT_EXPIRATION;

    /**
     * This Java function generates a token using the username, current date, expiration date, and a
     * secret key.
     *
     * @param username The username of the user for whom the JWT token is being generated. This will be
     * used as the subject of the JWT token.
     * @return The method is returning a string which is a JSON Web Token (JWT) generated using the
     * username provided as a parameter, the current date as the issued date, an expiration date
     * generated by the `generateExpirationDate()` method, and signed using the HS512 algorithm with a
     * secret key defined by the `JWT_SECRET` constant.
     */
    public String generateToken(String username){
        Date now = new Date();
        Date expiredDate = new Date(System.currentTimeMillis() + JWT_EXPIRATION);
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(now)
                .setExpiration(expiredDate)
                .signWith(SignatureAlgorithm.HS512, JWT_SECRET_KEY)
                .compact();
    }

    public boolean validateToken(String token){
        try {
            return getUsernameFromJwt(token) != null && !isExpired(token);
        } catch (SignatureException | MalformedJwtException ex) {
            log.error("Invalid JWT token: {}", ex.getMessage());
        } catch (ExpiredJwtException ex) {
            log.error("Expired JWT token: {}", ex.getMessage());
        } catch (IllegalArgumentException ex) {
            log.error("JWT claims string is empty: {}", ex.getMessage());
        } catch (UnsupportedJwtException ex) {
            log.error("JWT token is unsupported: {}", ex.getMessage());
        }
        return false;
    }

    public String getUsernameFromJwt(String token){
        Claims claims = getClaimsFromJwt(token);
        if(claims != null && !isExpired(token)){
            return claims.getSubject();
        }
        return null;
    }

    private Claims getClaimsFromJwt(String token){
        return Jwts.parser().setSigningKey(JWT_SECRET_KEY).parseClaimsJws(token).getBody();
    }

    /**
     * This function checks if a given JWT token has expired or not.
     *
     * @param token The JWT (JSON Web Token) that needs to be checked for expiration.
     * @return The method `isExpired` returns a boolean value indicating whether the expiration time of
     * the JWT token represented by the input string `token` has passed or not. If the expiration time
     * has passed, the method returns `true`, otherwise it returns `false`.
     */
    private boolean isExpired(String token){
        Claims claims = getClaimsFromJwt(token);
        // Nếu hạn sử dụng của token ở trước thời gian hệ thống thì token đã hết hạn => true
        // Nếu hạn sử dụng của token ở sau thời gian hệ thống thì token chưa hết hạn => false
        return claims.getExpiration().before(new Date(System.currentTimeMillis()));
    }
}
